#!/usr/bin/env python

import sys
import argparse
import httplib
import json
import subprocess
import urllib2

MODULE_NAME = 'srb'

def call_silent(cmd):
    return subprocess.call(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

def stdout(msg, *args):
    sys.stdout.writelines([msg % args, '\n'])

def stderr(msg, *args):
    sys.stderr.writelines([msg % args, '\n'])

def handle_module_load(args):
    rc = call_silent(['modinfo', '-n', MODULE_NAME])

    if rc != 0:
        raise EnvironmentError('Module \'%s\' not found' % MODULE_NAME)

    rc = call_silent(['modprobe', MODULE_NAME])
    if rc == 0:
        stdout('Module \'%s\' loaded successfully', MODULE_NAME)
    else:
        stderr('Failed to load module \'%s\'', MODULE_NAME)

def handle_volume_list(args):
    req = urllib2.Request(args.url)
    req.add_header('X-CDMI-Specification-Version', '1.0.1')

    resp = urllib2.urlopen(req)
    if resp.code != httplib.OK:
        raise Exception('Server returned code: %d' % resp.code)

    result = json.load(resp)

    for child in result['children']:
        print child

def handle_volume_create(args):
    raise NotImplementedError

def handle_volume_delete(args):
    raise NotImplementedError

def handle_volume_extend(args):
    raise NotImplementedError

def main(args):
    parser = argparse.ArgumentParser(
                description='SRB utilities',
                epilog='Note: For some commands root permissions are required')

    subparser = parser.add_subparsers(title='subcommands')

    parser_module_load = subparser.add_parser('module-load')
    parser_module_load.set_defaults(func=handle_module_load)

    parser_volume_list = subparser.add_parser('volume-list')
    parser_volume_list.set_defaults(func=handle_volume_list)
    parser_volume_list.add_argument('url', metavar='URL', type=str,
        help='CDMI server URL')

    parser_volume_create = subparser.add_parser('volume-create')
    parser_volume_create.set_defaults(func=handle_volume_create)

    parser_volume_delete = subparser.add_parser('volume-delete')
    parser_volume_delete.set_defaults(func=handle_volume_delete)

    parser_volume_extend = subparser.add_parser('volume-extend')
    parser_volume_extend.set_defaults(func=handle_volume_extend)

    args = parser.parse_args(args)

    try:
        args.func(args)
    except Exception as exc:
        stderr(str(exc))
        sys.exit(1)

if __name__ == '__main__':
    main(None)
