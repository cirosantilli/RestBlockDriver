#! /bin/sh
### BEGIN INIT INFO
# Provides:          srb
# Required-Start:    $syslog
# Required-Stop:     $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Scality RestBlock Driver
# Description:       This service loads Scality RestBlock  Driver
#                    and configures the servers from /etc/srb.conf.
### END INIT INFO

# Author: Frederic Donnat <fred@secludit.com>
#

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Scality RestBlock driver"
NAME=srb
SCRIPTNAME=/etc/init.d/$NAME
VERBOSE=yes
KMOD_NAME=srb

# Exit if the package is not installed
#[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/${NAME}.conf ] && . /etc/${NAME}.conf

# Load the VERBOSE setting and other rcS variables
#. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Parsing config
#
if [ -z $KMOD_PATH ]; then KMOD_PATH="/lib/modules/$(uname -r)/kernel/drivers/srb/"; fi

#
# Function that loads the ScalityRestBlock
#
do_load_drv() {
	# Load the driver
	insmod $KMOD_PATH/${KMOD_NAME}.ko > /dev/null || return 2	
}

#
# Function that unload the ScalityRestBlock
#
do_unload_drv() {
	# Unload the driver
	rmmod $KMOD_NAME > /dev/null || return 2
}

#
# Function that configures the servers
#
do_config_servers() {
	echo "$URLS" > /sys/class/srb/add_urls || return 2
}

#
# Function that unconfigures the servers
#
do_deconfig_servers() {
	echo "$URLS" > /sys/class/srb/remove_urls || return 2
}

#
# Function that checks status
#
do_check_drv_status() {
	lsmod | grep $KMOD_NAME > /dev/null || return 2
}
do_check_servers_status() {
	nb_urls=$(cat /sys/class/srb/urls | wc -l)
	[ $nb_urls -ne 0 ] && return 0 || return 2
}

case "$1" in
  start)
	#log_begin_msg "Starting $DESC" "$NAME"
	[ "$VERBOSE" != no ] && log_action_begin_msg "Loading ${KMOD_NAME} driver"
	do_load_drv
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_action_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_action_end_msg 1 ;;
	esac
	[ "$VERBOSE" != no ] && log_action_begin_msg "Adding ${NAME} servers"
	do_config_servers
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_action_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_action_end_msg 1 ; return 2 ;;
	esac
	#log_end_msg $?
	;;
  stop)
	#log_begin_msg "Stopping $DESC" "$NAME"
	[ "$VERBOSE" != no ] && log_action_begin_msg "Removing ${NAME} servers"
	do_deconfig_servers
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_action_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_action_end_msg 1 ; return 2 ;;
	esac
	[ "$VERBOSE" != no ] && log_action_begin_msg "Unloading ${KMOD_NAME} driver"
	do_unload_drv
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_action_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_action_end_msg 1 ; return 2 ;;
	esac
	#log_end_msg $?
	;;
  status)
	[ "$VERBOSE" != no ] && do_check_drv_status
	if [ $? -eq 0 ]; then
		[ "$VERBOSE" != no ] && log_success_msg "${KMOD_NAME} driver loaded"
	else
		[ "$VERBOSE" != no ] && log_failure_msg "${KMOD_NAME} driver *NOT* loaded"
		return 2
	fi
	[ "$VERBOSE" != no ] && do_check_servers_status
	if [ $? -eq 0 ]; then
		[ "$VERBOSE" != no ] && log_success_msg "${NAME} servers configured"
	else
		[ "$VERBOSE" != no ] && log_failure_msg "${NAME} *NO* servers configured"
		return 2
	fi
	return 0
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac
