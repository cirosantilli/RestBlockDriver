#! /bin/sh
### BEGIN INIT INFO
# Provides:          restbd
# Required-Start:    $syslog
# Required-Stop:     $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Scality RestBlockDriver
# Description:       This service loads Scality RestBlockDriver 
#                    and configures the mirrors from /etc/restbd.conf.
### END INIT INFO

# Author: Frederic Donnat <fred@secludit.com>
#

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Scality RestBD driver"
NAME=restbd
SCRIPTNAME=/etc/init.d/$NAME
VERBOSE=yes
KMOD_NAME=dewblock

# Exit if the package is not installed
#[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/${NAME}.conf ] && . /etc/${NAME}.conf

# Load the VERBOSE setting and other rcS variables
#. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Parsing config
#
if [ -z $KMOD_PATH ]; then KMOD_PATH="/lib/modules/$(uname -r)/kernel/drivers/restbd/"; fi

#
# Function that loads the RestBlockDriver
#
do_load_drv() {
	# Load the driver
	insmod $KMOD_PATH/${KMOD_NAME}.ko > /dev/null || return 2	
}

#
# Function that unload the RestBlockDriver
#
do_unload_drv() {
	# Unload the driver
	rmmod $KMOD_NAME > /dev/null || return 2
}

#
# Function that configures the mirrors
#
do_config_mirrors() {
	echo "$MIRRORS" > /sys/class/dewb/add_mirrors || return 2
}

#
# Function that unconfigures the mirrors
#
do_deconfig_mirrors() {
	echo "$MIRRORS" > /sys/class/dewb/remove_mirrors || return 2
}

#
# Function that checks status
#
do_check_drv_status() {
	lsmod | grep $KMOD_NAME > /dev/null || return 2
}
do_check_mirros_status() {
	nb_mirrors=$(cat /sys/class/dewb/mirrors | wc -l)
	[ $nb_mirrors -ne 0 ] && return 0 || return 2
}

case "$1" in
  start)
	#log_begin_msg "Starting $DESC" "$NAME"
	[ "$VERBOSE" != no ] && log_action_begin_msg "Loading ${KMOD_NAME} driver"
	do_load_drv
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_action_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_action_end_msg 1 ;;
	esac
	[ "$VERBOSE" != no ] && log_action_begin_msg "Adding ${NAME} mirrors"
	do_config_mirrors
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_action_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_action_end_msg 1 ; return 2 ;;
	esac
	#log_end_msg $?
	;;
  stop)
	#log_begin_msg "Stopping $DESC" "$NAME"
	[ "$VERBOSE" != no ] && log_action_begin_msg "Removing ${NAME} mirrors"
	do_deconfig_mirrors
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_action_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_action_end_msg 1 ; return 2 ;;
	esac
	[ "$VERBOSE" != no ] && log_action_begin_msg "Unloading ${KMOD_NAME} driver"
	do_unload_drv
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_action_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_action_end_msg 1 ; return 2 ;;
	esac
	#log_end_msg $?
	;;
  status)
	[ "$VERBOSE" != no ] && do_check_drv_status
	if [ $? -eq 0 ]; then
		[ "$VERBOSE" != no ] && log_success_msg "${KMOD_NAME} driver loaded"
	else
		[ "$VERBOSE" != no ] && log_failure_msg "${KMOD_NAME} driver *NOT* loaded"
		return 2
	fi
	[ "$VERBOSE" != no ] && do_check_mirros_status
	if [ $? -eq 0 ]; then
		[ "$VERBOSE" != no ] && log_success_msg "${NAME} mirrors configured"
	else
		[ "$VERBOSE" != no ] && log_failure_msg "${NAME} *NO* mirrors configured"
		return 2
	fi
	return 0
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac
